definitions:
  auth.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.LogoutRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  auth.PasswordResetRequest:
    properties:
      password:
        type: string
      password_confirm:
        type: string
      reset_token:
        type: string
    required:
    - password
    - password_confirm
    - reset_token
    type: object
  auth.RefreshRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  auth.RegisterRequest:
    properties:
      birth_date:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      password_confirm:
        type: string
    required:
    - birth_date
    - email
    - first_name
    - last_name
    - password
    - password_confirm
    type: object
  auth.RegisterResponse:
    properties:
      user_id:
        type: string
    required:
    - user_id
    type: object
  auth.VerifyEmailRequest:
    properties:
      user_id:
        type: string
      verification_code:
        type: string
    required:
    - user_id
    - verification_code
    type: object
  models.EmptyResponse:
    type: object
  models.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  models.MutableUserFields:
    properties:
      birth_date:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    type: object
  models.PaymentStatus:
    enum:
    - not_found
    - created_link
    - in_progress
    - paid
    - failed
    type: string
    x-enum-varnames:
    - NotFound
    - CreatedLink
    - InProgress
    - Paid
    - Failed
  models.TokensResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    required:
    - access_token
    - refresh_token
    type: object
  payment.PaymentInfoResponse:
    properties:
      payment_status:
        $ref: '#/definitions/models.PaymentStatus'
    required:
    - payment_status
    type: object
  payment.PaymentLinkResponse:
    properties:
      link:
        type: string
    required:
    - link
    type: object
  profile.ProfileInfo:
    properties:
      birth_date:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    required:
    - birth_date
    - email
    - first_name
    - last_name
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: SuitesMe service API in Go using Echo framework.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SuitesMe Service
  version: "1.0"
paths:
  /api/v1/auth/email/verify:
    post:
      consumes:
      - application/json
      description: Verify user email
      operationId: auth-verify-email
      parameters:
      - description: Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.VerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Verify user email
      tags:
      - auth
  /api/v1/auth/forgot_password:
    post:
      consumes:
      - application/json
      description: User forgot password
      operationId: auth-forgot-password
      parameters:
      - description: Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Forgot password
      tags:
      - auth
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login user and return tokens
      operationId: auth-login
      parameters:
      - description: Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.TokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      operationId: auth-logout
      parameters:
      - description: Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Logout user
      tags:
      - auth
  /api/v1/auth/password/reset:
    post:
      consumes:
      - application/json
      description: Reset password
      operationId: auth-password-reset
      parameters:
      - description: Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.PasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Reset password
      tags:
      - auth
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      operationId: auth-refresh
      parameters:
      - description: Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.TokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Refresh tokens
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register user and send verification email
      operationId: auth-register
      parameters:
      - description: Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/auth.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register user
      tags:
      - auth
  /api/v1/payment/callback:
    post:
      consumes:
      - application/json
      description: Get payment-callback
      operationId: get-payment-callback
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get payment callback
      tags:
      - payment
  /api/v1/payment/info:
    get:
      consumes:
      - application/json
      description: Get payment-info
      operationId: get-payment-info
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/payment.PaymentInfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get payment info
      tags:
      - payment
  /api/v1/payment/link:
    post:
      consumes:
      - application/json
      description: Get payment-link
      operationId: get-payment-link
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/payment.PaymentLinkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get payment link
      tags:
      - payment
  /api/v1/payment/notify:
    post:
      consumes:
      - application/json
      description: payment-notify
      operationId: payment-notify
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: payment notify status=OK
      tags:
      - payment
  /api/v1/profile/edit:
    post:
      consumes:
      - application/json
      operationId: user-profile-edit
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.MutableUserFields'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User profile edit
      tags:
      - user
  /api/v1/profile/info:
    get:
      consumes:
      - application/json
      operationId: user-profile-info
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/profile.ProfileInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User profile info
      tags:
      - user
swagger: "2.0"
